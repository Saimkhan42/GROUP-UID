# Encrypted By Saim King
 # Github : GitHub.com/Saimkhan420
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b''))
